#include <iostream>
#include <cstring>
#include <cctype> // for isalpha()
using namespace std;

struct node
{
    char data;
    node *left;
    node *right;
};

class stack1
{
    node *data[30];
    int top;

public:
    stack1()
    {
        top = -1;
    }

    bool empty()
    {
        return top == -1;
    }

    void push(node *p)
    {
        if (top < 29)
            data[++top] = p;
    }

    node *pop()
    {
        if (top >= 0)
            return data[top--];
        return nullptr;
    }
};

class tree
{
public:
    node *top;

    tree()
    {
        top = nullptr;
    }

    void expression(const char prefix[]);
    void display(node *root);
    void non_rec_postorder(node *top);
    void del(node *node);
};

void tree::expression(const char prefix[])
{
    stack1 s;
    int len = strlen(prefix);

    for (int i = len - 1; i >= 0; i--)
    {
        node *newNode = new node;
        newNode->left = newNode->right = nullptr;

        if (isalpha(prefix[i]))
        {
            newNode->data = prefix[i];
            s.push(newNode);
        }
        else if (prefix[i] == '+' || prefix[i] == '-' || prefix[i] == '*' || prefix[i] == '/')
        {
            node *t1 = s.pop();
            node *t2 = s.pop();
            newNode->data = prefix[i];
            newNode->left = t1;
            newNode->right = t2;
            s.push(newNode);
        }
    }

    top = s.pop();
}

void tree::display(node *root)
{
    if (root != nullptr)
    {
        cout << root->data << " ";
        display(root->left);
        display(root->right);
    }
}

void tree::non_rec_postorder(node *top)
{
    if (!top)
        return;

    stack1 s1, s2;
    s1.push(top);

    while (!s1.empty())
    {
        node *curr = s1.pop();
        s2.push(curr);

        if (curr->left)
            s1.push(curr->left);
        if (curr->right)
            s1.push(curr->right);
    }

    cout << "\nPostorder (non-recursive): ";
    while (!s2.empty())
    {
        cout << s2.pop()->data << " ";
    }
    cout << endl;
}

void tree::del(node *root)
{
    if (root == nullptr)
        return;

    del(root->left);
    del(root->right);
    cout << "Deleting node: " << root->data << endl;
    delete root;
}

int main()
{
    char expr[20];
    tree t;

    cout << "Enter Prefix Expression (no spaces, e.g. +ab): ";
    cin >> expr;

    t.expression(expr);
    t.non_rec_postorder(t.top);
    t.del(t.top);

    return 0;
}
